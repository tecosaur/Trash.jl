#+title: Usage

* Summary

The way that trashing is performed differs /wildly/ between platforms:
+ On Linux, we trashing works by moving files and creating/reading paired
  ini-style =.trashinfo= files (this is the [[https://specifications.freedesktop.org/trash-spec/1.0/][Freedesktop Trashspec]]).
+ On MacOS, trashing is done using the Objective-C API, specifically
  [[https://developer.apple.com/documentation/foundation/filemanager/trashitem(at:resultingitemurl:)?language=objc][~trashItemAtURL:resultingItemURL:error:~]] and manually parsing the =.DS_Store=
  file.
+ On Windows, the Win32 [[https://learn.microsoft.com/en-us/windows/win32/api/shobjidl_core/nf-shobjidl_core-ifileoperation-deleteitem][~IFileOperation::DeleteItem~]] API is used for trashing,
  and the remaining functionality is implemented by manually inspecting the
  recycling bin.

These large differences make a coherent cross-platform API a bit difficult, but
by focusing on just supporting basic functionality (trashing and untrashing,
listing and emptying trash contents) we have a solid cross-platform trash
library.

* Example usage

#+begin_src julia-repl
julia> using Trash

julia> write("demofile", "some content")
12

julia> trash("demofile")
TrashFile("/tmp/demofile" @ 2025-04-27)

julia> write("demofile", "more content")
12

julia> trash("demofile")
TrashFile("/tmp/demofile" @ 2025-04-27)

julia> Trash.search("demofile")
2-element Vector{TrashFile}:
 TrashFile("/tmp/demofile" @ 2025-04-27)
 TrashFile("/tmp/demofile" @ 2025-04-27)

julia> untrash("demofile", pick = :oldest)
"demofile"

julia> read("demofile", String)
"some content"

julia> untrash("demofile", force = true)
"demofile"

julia> read("demofile", String)
"more content"
#+end_src

* Functions

#+begin_src @docs
Trash.trash
Trash.untrash
Trash.trashdir
Trash.trashes
Trash.list
Trash.search
Trash.empty
#+end_src

* Types

#+begin_src @docs
Trash.TrashFile
#+end_src

* Platform complications
** Linux (XDG Trash)

Everything works great ðŸ™‚.

** MacOS

The "put back" functionality is broken, as the =.DS_Store= file is not properly
modified with the provided system APIs. See
https://openradar.appspot.com/23153124 for more information.

We rely on parsing the (undocumented) =.DS_Store= file to read trash information.

** Windows

Everything works, but trashing a file with knowledge of where it ended up and
the associated deletion time is rather involved. It's about a thousand times
slower to delete a file on Windows than Linux or MacOS, but unless you're
wanting to trash thousands and thousands of files, this shouldn't be a concern.

We rely on an undocumented convention for the recycle bin path, as
=SHGetKnownFolderPath= pretends that the recycle bin does not correspond to a
physical folder (even though it does). We also rely on the (undocumented)
existence of =$R...= and parsed data from =$I...= files in the recycle bin to
retrieve information on the contents of the recycle bin.
