var documenterSearchIndex = {"docs":
[{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/#Summary","page":"Usage","title":"Summary","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"The way that trashing is performed differs wildly between platforms:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"On Linux, we trashing works by moving files and creating/reading paired ini-style .trashinfo files (this is the Freedesktop Trashspec).\nOn MacOS, trashing is done using the Objective-C API, specifically trashItemAtURL:resultingItemURL:error: and manually parsing the .DS_Store file.\nOn Windows, the Win32 IFileOperation::DeleteItem API is used for trashing, and the remaining functionality is implemented by manually inspecting the recycling bin.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"These large differences make a coherent cross-platform API a bit difficult, but by focusing on just supporting basic functionality (trashing and untrashing, listing and emptying trash contents) we have a solid cross-platform trash library.","category":"page"},{"location":"usage/#Example-usage","page":"Usage","title":"Example usage","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia> using Trash\n\njulia> write(\"demofile\", \"some content\")\n12\n\njulia> trash(\"demofile\")\nTrashFile(\"/tmp/demofile\" @ 2025-04-27)\n\njulia> write(\"demofile\", \"more content\")\n12\n\njulia> trash(\"demofile\")\nTrashFile(\"/tmp/demofile\" @ 2025-04-27)\n\njulia> Trash.search(\"demofile\")\n2-element Vector{TrashFile}:\n TrashFile(\"/tmp/demofile\" @ 2025-04-27)\n TrashFile(\"/tmp/demofile\" @ 2025-04-27)\n\njulia> untrash(\"demofile\", pick = :oldest)\n\"demofile\"\n\njulia> read(\"demofile\", String)\n\"some content\"\n\njulia> untrash(\"demofile\", force = true)\n\"demofile\"\n\njulia> read(\"demofile\", String)\n\"more content\"","category":"page"},{"location":"usage/#Functions","page":"Usage","title":"Functions","text":"","category":"section"},{"location":"usage/#Trash.trash","page":"Usage","title":"Trash.trash","text":"trash(path::String; force::Bool=false)\n\nPut the file, link, or empty directory in the system trash. If force=true is passed, a non-existing path is not treated as an error.\n\nSee also: Trash.list, untrash.\n\n\n\n\n\n","category":"function"},{"location":"usage/#Trash.untrash","page":"Usage","title":"Trash.untrash","text":"untrash(entry::TrashFile, dest::String = original path;\n        force::Bool = false, rm::Bool = false)\n\nRestore a file, link, or directory represented by entry from the system trash.\n\nThe entry will be restored to the path dest, which defaults to the original location of the entry.\n\nIf force is true, any existing file at the destination will be trashed, and if rm is true, the file will be removed with Base.rm.\n\nSee also: trash, Trash.list.\n\n\n\n\n\n","category":"function"},{"location":"usage/#Trash.untrash-Tuple{String}","page":"Usage","title":"Trash.untrash","text":"untrash(path::String, dest::String = path; pick::Symbol = :only,\n        force::Bool = false, rm::Bool = false)\n\nRestore the original contents of path, optionally specifying a different destination.\n\nShould multiple entries of path exist in the trash, an entry will be chosen based on the pick option. The default is :only, which will throw an ArgumentError if multiple entries are found. The other options are :newest and :oldest, which will select the most recent or oldest entry, respectively.\n\nThe force and rm options are passed through to the untrash(::TrashFile) function.\n\n\n\n\n\n","category":"method"},{"location":"usage/#Trash.trashdir","page":"Usage","title":"Trash.trashdir","text":"trashdir() -> String\n\nReturn the general trash directory for the current user.\n\n\n\n\n\n","category":"function"},{"location":"usage/#Trash.trashdir-Tuple{String}","page":"Usage","title":"Trash.trashdir","text":"trashdir(path::String) -> String\n\nReturn the trash directory used for path.\n\n\n\n\n\n","category":"method"},{"location":"usage/#Trash.list","page":"Usage","title":"Trash.list","text":"list() -> Vector{TrashFile}\n\nList all entries currently in the user's trash.\n\nSee also: trash, untrash.\n\n\n\n\n\n","category":"function"},{"location":"usage/#Trash.list-Tuple{String}","page":"Usage","title":"Trash.list","text":"list(trashdir::String) -> Vector{TrashFile}\n\nList all entries currently in the trash directory trashdir.\n\nSee also: trashdir, search.\n\n\n\n\n\n","category":"method"},{"location":"usage/#Trash.empty","page":"Usage","title":"Trash.empty","text":"empty()\n\nEmpty the user trash.\n\nSee also: trash, Trash.list.\n\n\n\n\n\n","category":"function"},{"location":"usage/#Trash.empty-Tuple{String}","page":"Usage","title":"Trash.empty","text":"empty(trashdir::String)\n\nEmpty the trash directory trashdir.\n\n\n\n\n\n","category":"method"},{"location":"usage/#Types","page":"Usage","title":"Types","text":"","category":"section"},{"location":"usage/#Trash.TrashFile","page":"Usage","title":"Trash.TrashFile","text":"TrashFile\n\nA representation of a file that has been trashed.\n\nThis file contains the path to the original file, the time it was trashed, and where it has been moved to in the trash.\n\n\n\n\n\n","category":"type"},{"location":"usage/#Platform-complications","page":"Usage","title":"Platform complications","text":"","category":"section"},{"location":"usage/#Linux-(XDG-Trash)","page":"Usage","title":"Linux (XDG Trash)","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Everything works great ðŸ™‚.","category":"page"},{"location":"usage/#MacOS","page":"Usage","title":"MacOS","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"The \"put back\" functionality is broken, as the .DS_Store file is not properly modified with the provided system APIs. See https://openradar.appspot.com/23153124 for more information.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"We rely on parsing the (undocumented) .DS_Store file to read trash information.","category":"page"},{"location":"usage/#Windows","page":"Usage","title":"Windows","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Everything works, but trashing a file with knowledge of where it ended up and the associated deletion time is rather involved. It's about a thousand times slower to delete a file on Windows than Linux or MacOS, but unless you're wanting to trash thousands and thousands of files, this shouldn't be a concern.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"We rely on an undocumented convention for the recycle bin path, as SHGetKnownFolderPath pretends that the recycle bin does not correspond to a physical folder (even though it does). We also rely on the (undocumented) existence of $R... and parsed data from $I... files in the recycle bin to retrieve information on the contents of the recycle bin.","category":"page"},{"location":"#Trash","page":"Introduction","title":"Trash","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Sometimes you want to get rid of a file, but make it possible for it to be restored later (by your program or the user).","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The way this should be done varies by operating system. This library helps you handle this simply and in a (largely, see Platform Complications) cross-platform way with trash. It's no surprise that the utility of this function has been realised across multiple language ecosystems, with a healthy collection of cross-platform trash libraries floating around. Most of these only provide the ability to send a file to the trash, but Trash.jl goes further, giving you the ability to restore items with untrash, inspect the contents of the trash with list, and delete the trash with empty.","category":"page"}]
}
